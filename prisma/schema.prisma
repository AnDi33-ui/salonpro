// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modello per i saloni
model Salon {
  id          String   @id @default(cuid())
  name        String
  email       String   @unique
  phone       String?
  address     String?
  city        String?
  postalCode  String?
  country     String   @default("Italy")
  
  // Subscription info
  plan        PlanType @default(BASIC)
  isActive    Boolean  @default(true)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  staff       Staff[]
  clients     Client[]
  services    Service[]
  appointments Appointment[]
  
  @@map("salons")
}

// Modello per lo staff del salone
model Staff {
  id          String   @id @default(cuid())
  email       String   @unique
  firstName   String
  lastName    String
  phone       String?
  role        StaffRole @default(STYLIST)
  isActive    Boolean  @default(true)
  
  // Relations
  salonId     String
  salon       Salon    @relation(fields: [salonId], references: [id], onDelete: Cascade)
  appointments Appointment[]
  
  // Auth relation (optional - staff might not have user account)
  user        User?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("staff")
}

// Modello per i clienti
model Client {
  id          String   @id @default(cuid())
  firstName   String
  lastName    String
  email       String?
  phone       String
  dateOfBirth DateTime?
  gender      Gender?
  
  // Preferenze e note
  notes       String?
  allergies   String?
  preferences String?
  
  // Relations
  salonId     String
  salon       Salon    @relation(fields: [salonId], references: [id], onDelete: Cascade)
  appointments Appointment[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([email, salonId])
  @@map("clients")
}

// Modello per i servizi offerti
model Service {
  id          String   @id @default(cuid())
  name        String
  description String?
  duration    Int      // in minutes
  price       Float
  category    ServiceCategory
  isActive    Boolean  @default(true)
  
  // Relations
  salonId     String
  salon       Salon    @relation(fields: [salonId], references: [id], onDelete: Cascade)
  appointmentServices AppointmentService[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("services")
}

// Modello per gli appuntamenti
model Appointment {
  id          String   @id @default(cuid())
  date        DateTime
  startTime   DateTime
  endTime     DateTime
  status      AppointmentStatus @default(SCHEDULED)
  notes       String?
  totalPrice  Float    @default(0)
  
  // Relations
  salonId     String
  salon       Salon    @relation(fields: [salonId], references: [id], onDelete: Cascade)
  
  clientId    String
  client      Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  
  staffId     String
  staff       Staff    @relation(fields: [staffId], references: [id], onDelete: Cascade)
  
  services    AppointmentService[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("appointments")
}

// Tabella di join per servizi negli appuntamenti
model AppointmentService {
  id            String      @id @default(cuid())
  appointmentId String
  serviceId     String
  price         Float       // prezzo al momento dell'appuntamento
  
  appointment   Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  service       Service     @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  
  @@unique([appointmentId, serviceId])
  @@map("appointment_services")
}

// Enums
enum PlanType {
  BASIC    // €29/mese
  PRO      // €79/mese  
  PREMIUM  // €149/mese
}

enum StaffRole {
  OWNER
  MANAGER
  STYLIST
  ASSISTANT
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum ServiceCategory {
  HAIRCUT
  COLOR
  STYLING
  TREATMENT
  NAIL
  FACIAL
  MASSAGE
  OTHER
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}

// NextAuth.js Tables
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  
  // Link to staff member
  staffId       String?   @unique
  staff         Staff?    @relation(fields: [staffId], references: [id], onDelete: SetNull)

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
